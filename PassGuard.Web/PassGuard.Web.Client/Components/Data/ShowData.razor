@using PassGuard.Shared.Models
@using PassGuard.Shared.State
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject PasswordState PasswordState
@using System.Text.RegularExpressions
@inject IDialogService DialogService

@rendermode InteractiveWebAssembly

<MudDialogProvider />

<MudTable Items="@FilteredPasswordArray" Dense=true Hover=true Bordered=true Striped=true>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Liste de vos mots de passe</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Recherche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ToolBarContent>
        <MudText Typo="Typo.h6" Style="font-size: 0.8rem">Double cliquez sur une ligne pour l'éditer</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Site</MudTh>
        <MudTh>Nom d'utilisateur</MudTh>
        <MudTh>Mot de passe</MudTh>
        <MudTh>Catégorie</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (editingItem == @context)
        {
            <MudTd DataLabel="Site" style="background-color: rgba(166,166,166,0.75)">
                <MudTextField T="string" @bind-Value="editingItem.Site" />
            </MudTd>
            <MudTd DataLabel="Nom d'utilisateur" style="background-color: rgba(166,166,166,0.75)">
                <MudTextField T="string" @bind-Value="editingItem.Username" />
            </MudTd>
            
            <MudTd DataLabel="Mot de passe" 
                    style="background-color: rgba(166,166,166,0.75); width: 30rem; min-width: 30rem">
                <div style="display: flex; align-items: center">
                    <span>
                        <MudTextField T="string" @bind-Value="editingItem.Password"
                                      InputType="@(IsPasswordVisible(context.Id) ? InputType.Text : InputType.Password)"
                                      />
                    </span>
                    <MudIconButton Icon="@(IsPasswordVisible(@context.Id) ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                   Color="Color.Info"
                                   Size="Size.Small"
                                   Style="margin-left: 1rem;"
                                   OnClick="@(async () =>
                                            {
                                                if (isLocked)
                                                {
                                                    Console.WriteLine("C'est bloqué");
                                                }
                                                else if (IsPasswordVisible(context.Id))
                                                {
                                                    TogglePasswordVisibility(@context.Id);
                                                }
                                                else
                                                {
                                                    await OpenDialogAsync(@context.Id);
                                                }
                                            })"/>
                </div>
            </MudTd>
            <MudTd DataLabel="Catégorie" style="background-color: rgba(166,166,166,0.75)">
                <MudTextField T="string" @bind-Value="editingItem.Category" />
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Color="Color.Tertiary" OnClick="@SaveChanges">Enregistrer</MudButton>
                <MudButton Color="Color.Secondary" OnClick="@CancelEditing">Annuler</MudButton>
                <MudButton Color="Color.Primary" OnClick="@DeleteEditing">Effacer</MudButton>
            </MudTd>
        }
        else
        {
            <MudTd DataLabel="Site"
                   @ondblclick="@(() => OnRowDoubleClick(@context))">
                @((MarkupString)HighlightText(@context.Site))
            </MudTd>
            <MudTd DataLabel="Nom d'utilisateur"
                   @ondblclick="@(() => OnRowDoubleClick(@context))">
                @((MarkupString)HighlightText(@context.Username))
            </MudTd>
            <MudTd DataLabel="Mot de passe"
                   @ondblclick="@(() => OnRowDoubleClick(@context))"
                   style="width: 30rem; min-width: 30rem;">
                <div style="display: flex; align-items: center;">
                    <span>
                        @(IsPasswordVisible(@context.Id)
                            ? @context.Password 
                            : new string('•',20))
                    </span>
                    <MudIconButton Icon="@(IsPasswordVisible(@context.Id) ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                       Color="Color.Info"
                       Size="Size.Small"
                       Style="margin-left: 1rem;"
                       OnClick="@(async () =>
                                {
                                    if (isLocked)
                                    {
                                        Console.WriteLine("C'est bloqué");
                                    }
                                    else if (IsPasswordVisible(context.Id))
                                    {
                                        TogglePasswordVisibility(@context.Id);
                                    }
                                    else {
                                        await OpenDialogAsync(@context.Id);
                                    }
                    })" />
                </div>
            </MudTd>
            <MudTd DataLabel="Catégorie"
                   @ondblclick="@(() => OnRowDoubleClick(@context))">
                @((MarkupString)HighlightText(@context.Category))
            </MudTd>
        }
    </RowTemplate>
</MudTable>

@code {
    private ObjectPassword[]? _passwordArray;
    private string searchString1 = "";
    private ObjectPassword? editingItem;
    
    private Dictionary<Guid, bool> passwordVisibility = new Dictionary<Guid, bool>();
    private bool isLocked = false;
    private int failureCount = 0;
    
    protected async override Task OnInitializedAsync()
    {
        PasswordState.OnChange += PasswordStateChanged;

        _passwordArray = await PasswordState.GetPasswordArray();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _passwordArray = await PasswordState.GetPasswordArray();
            StateHasChanged();
        }
    }
    
    private void PasswordStateChanged()
    {
        _passwordArray = PasswordState.PasswordArray;
        InvokeAsync(StateHasChanged);
    }

    private void OnRowDoubleClick(ObjectPassword item)
    {
        editingItem = item;
    }
    
    private async void SaveChanges()
    {
        await PasswordState.UpdatePasword(editingItem);

        passwordVisibility[editingItem.Id] = false;
        editingItem = null;
        StateHasChanged();
    }
    
    private void CancelEditing()
    {
        editingItem = null;
        StateHasChanged();
    }

    private async void DeleteEditing()
    {
        await PasswordState.DeletePassword(editingItem);
        editingItem = null;
        StateHasChanged();
    }
    
    private ObjectPassword[] FilteredPasswordArray =>
        _passwordArray is null ? Array.Empty<ObjectPassword>() :
            string.IsNullOrWhiteSpace(searchString1)
                ? _passwordArray
                : _passwordArray.Where(p =>
                    (!string.IsNullOrEmpty(p.Site) && p.Site.Contains(searchString1, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(p.Username) && p.Username.Contains(searchString1, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(p.Category) && p.Category.Contains(searchString1, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(p.Password) && p.Password.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
                ).ToArray();
    
    private string GetHighlightStyle(string? text)
    {
        if (string.IsNullOrWhiteSpace(searchString1) || string.IsNullOrWhiteSpace(text))
            return string.Empty;

        return text.Contains(searchString1, StringComparison.OrdinalIgnoreCase)
            ? "background-color: yellow; font-weight: bold;"
            : string.Empty;
    }
    
    private MarkupString HighlightText(string text)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
        {
            return new MarkupString(text);
        }

        string pattern = Regex.Escape(searchString1);
        string replacement = $"<span style=\"background-color: yellow; font-weight: bold;\">$0</span>";
        string result = Regex.Replace(text, pattern, replacement, RegexOptions.IgnoreCase);
        return new MarkupString(result);
    }
    
    private bool IsPasswordVisible(Guid id)
    {
        return passwordVisibility.ContainsKey(id) && passwordVisibility[id];
    }

    private void TogglePasswordVisibility(Guid id)
    {
        if (passwordVisibility.ContainsKey(id))
        {
            passwordVisibility[id] = !passwordVisibility[id];
        }
        else
        {
            passwordVisibility[id] = true;
        }
        StateHasChanged();
    }
    
    private void ToggleVisibilityAfterConfirmation(Guid id)
    {
        if (passwordVisibility.ContainsKey(id))
        {
            passwordVisibility[id] = true;
        }

        StateHasChanged();
    }
    
    private async Task OpenDialogAsync(Guid id)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = DialogService.Show<PasswordConfirm>("Confirmez votre mot de passe", options);

        var result = await dialog.Result;
        
        if (result != null)
        {
            var enteredPassword = result.Data.ToString();
            SubmitPassword(enteredPassword, id);
        }
    }

    private async Task SubmitPassword(string password, Guid id)
    {
        var payload = new VerifyPassword()
        {
            Password = password,
            Token = await localStorage.GetItemAsync<string>("token"),
            IdLine = id
            
        };
        
        var content = JsonContent.Create(payload);

        var response = await HttpClient.PostAsync("https://localhost:7012/api/auth/verifypass", content);

        if (response.IsSuccessStatusCode)
        {
            var decryptedPass = await response.Content.ReadAsStringAsync();

            // J'ajoute la visibilité True pour mon id dans mon dict
            passwordVisibility[id] = true;

            // ToggleVisibilityAfterConfirmation(id);
            
            if(editingItem != null && editingItem.Id == id) editingItem.Password = decryptedPass;
            
            // Mise à jour de la cellule
            var targetCell =
                _passwordArray?.FirstOrDefault(p => p.Id == id);
            
            if (targetCell != null) targetCell.Password = decryptedPass; 
            StateHasChanged();

            // if (passwordVisibility.ContainsKey(id))
            //     passwordVisibility[id] = true;
            // else
            //     passwordVisibility.Add(id, true);
            
            failureCount = 0;
            isLocked = false;
        }
        else
        {
            failureCount ++;

            if (failureCount >= 3)
            {
                isLocked = true;
                failureCount = 0;
                
                await Task.Delay(30000);
                isLocked = false;
                StateHasChanged();
            }
        }
    }
    
}   
