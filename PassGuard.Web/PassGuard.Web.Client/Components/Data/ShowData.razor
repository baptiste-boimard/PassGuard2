@using PassGuard.Shared.Models
@using PassGuard.Shared.State
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject PasswordState PasswordState


@rendermode InteractiveWebAssembly

<MudTable Items="@_passwordArray" Dense=true Hover=true Bordered=true Striped=true>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Liste de vos mots de passe</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Site</MudTh>
        <MudTh>Nom d'utilisateur</MudTh>
        <MudTh>Mot de passe</MudTh>
        <MudTh>Catégorie</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (editingItem == @context)
        {
            <MudTd DataLabel="Site" style="background-color: rgba(166,166,166,0.75)">
                <MudTextField T="string" @bind-Value="editingItem.Site" />
            </MudTd>
            <MudTd DataLabel="Nom d'utilisateur" style="background-color: rgba(166,166,166,0.75)">
                <MudTextField T="string" @bind-Value="editingItem.Username" />
            </MudTd>
            <MudTd DataLabel="Mot de passe" style="background-color: rgba(166,166,166,0.75)">
                <MudTextField T="string" @bind-Value="editingItem.Password" />
            </MudTd>
            <MudTd DataLabel="Catégorie" style="background-color: rgba(166,166,166,0.75)">
                <MudTextField T="string" @bind-Value="editingItem.Category" />
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Color="Color.Tertiary" OnClick="@SaveChanges">Enregistrer</MudButton>
                <MudButton Color="Color.Secondary" OnClick="@CancelEditing">Annuler</MudButton>
                <MudButton Color="Color.Primary" OnClick="@DeleteEditing">Effacer</MudButton>
            </MudTd>
        }
        else
        {
            <MudTd DataLabel="Site" @ondblclick="@(() => OnRowDoubleClick(@context))">@context.Site</MudTd>
            <MudTd DataLabel="Nom d'utilisateur" @ondblclick="@(() => OnRowDoubleClick(@context))">@context.Username</MudTd>
            <MudTd DataLabel="Mot de passe" @ondblclick="@(() => OnRowDoubleClick(@context))">@context.Password</MudTd>
            <MudTd DataLabel="Catégorie" @ondblclick="@(() => OnRowDoubleClick(@context))">@context.Category</MudTd>
        }
    </RowTemplate>
</MudTable>

@code {
    private ObjectPassword[]? _passwordArray;
    private string searchString1 = "";
    private ObjectPassword? editingItem;
    
    protected async override Task OnInitializedAsync()
    {
        PasswordState.OnChange += PasswordStateChanged;

        _passwordArray = await PasswordState.GetPasswordArray();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _passwordArray = await PasswordState.GetPasswordArray();
            StateHasChanged();
        }
    }
    
    private void PasswordStateChanged()
    {
        _passwordArray = PasswordState.PasswordArray;
        InvokeAsync(StateHasChanged);
    }

    private void OnRowDoubleClick(ObjectPassword item)
    {
        editingItem = item;
    }
    
    private async void SaveChanges()
    {
        await PasswordState.UpdatePasword(editingItem);
        
        editingItem = null;
        StateHasChanged();
    }
    
    private void CancelEditing()
    {
        editingItem = null;
        StateHasChanged();
    }

    private async void DeleteEditing()
    {
        await PasswordState.DeletePassword(editingItem);
        editingItem = null;
        StateHasChanged();
    }
}