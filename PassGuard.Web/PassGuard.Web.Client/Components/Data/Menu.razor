@inject NavigationManager Navigation
@using System.Security.Cryptography
@using Blazored.LocalStorage
@using PassGuard.Shared.State
@rendermode InteractiveWebAssembly
@inject UserState UserState
@inject ILocalStorageService LocalStorage


<MudPaper 
    Class="pa-0"
    Style="margin-bottom: 4rem !important;"
>
    <MudToolBar Style="display: flex; align-items: center;">
        <MudImage 
            Src="Images/Passguard.png"
            Alt="PassGuard"
            Elevation="25"
            Class="rounded-lg"
            Style="
                margin-right: 1rem !important;
                max-height: 2rem !important;" />
        
        <MudText Typo="Typo.h6" Style="font-size: 1rem !important;">Vous êtes connecté en temps que : @email</MudText>
        
        <MudButton
            Style="margin-left: 4rem !important"
            Color="Color.Info"
            OnClick="@(() => Logout())">Se déconnecter</MudButton>
        
        <MudButton
            data-testid="generate-button"
            Color="Color.Info"
            Variant="Variant.Filled"
            Style="margin-left: 4rem !important;"
            OnClick="@(() => GenerateCode())">Générer un mot de passe  =></MudButton>
        
        <MudText 
            data-testid="generated-text"
            Style="margin-left: 1rem !important;">
            @generateCode
        </MudText>
        
    </MudToolBar>
</MudPaper>

@code {
    public string? email;
    private string generateCode = string.Empty;

    protected override void OnInitialized()
    {
        UserState.OnChange += UserStateChanged;
    }

    private void UserStateChanged()
    {
        email = UserState.Email;
        InvokeAsync(StateHasChanged);
    }

    private async void Logout()
    {
        await LocalStorage.RemoveItemAsync("token");
        Navigation.NavigateTo("/");

    }

    public void GenerateCode()
    {
        const int length = 18;
        const string upperChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string lowerChars = "abcdefghijklmnopqrstuvwxyz";
        const string digits = "0123456789";
        const string specialChars = "!@#$%^&*()-_+=<>?";
        const string allChars = upperChars + lowerChars + digits + specialChars;
        
        char[] password = new char[length];
        
        password[0] = upperChars[RandomNumberGenerator.GetInt32(upperChars.Length)];
        password[1] = lowerChars[RandomNumberGenerator.GetInt32(lowerChars.Length)];
        password[2] = digits[RandomNumberGenerator.GetInt32(digits.Length)];
        password[3] = specialChars[RandomNumberGenerator.GetInt32(specialChars.Length)];
        
        for (int i = 4; i < length; i++)
        {
            password[i] = allChars[RandomNumberGenerator.GetInt32(allChars.Length)];
        }
        
        // Shuffle
        generateCode = new string (password.OrderBy(x => RandomNumberGenerator.GetInt32(int.MaxValue)).ToArray());
        StateHasChanged();
    }
}