@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using PassGuard.Web.Client.Components.Data
@using Microsoft.AspNetCore.Components.Authorization
@using PassGuard.Shared.Models
@using PassGuard.Web.Client.Service
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@* @inject AuthStateProvider AuthStateProvider *@
@inject NavigationManager Navigation
@inject IJSRuntime JS




@page "/pass"
@rendermode InteractiveWebAssembly
@* @attribute [Authorize] *@



@* <AuthorizeView> *@
@*     <Authorized> *@
        <PageTitle>Pass</PageTitle>

        <h1 class="text-muted">Render @(OperatingSystem.IsBrowser() ? "Wasm" : "Server")</h1>
        @if(token != null)
        {
            <p>@token.Token</p>
        }
        else
        {
            <p>Token is null</p>
        }
        @* <ShowData /> *@
        @* <EnterData /> *@
    @* </Authorized> *@
    @* <NotAuthorized> *@
    @*     <p>Non loggé</p> *@
@*     </NotAuthorized> *@
@* </AuthorizeView> *@


@code {
    JwtToken token;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await localStorage.GetItemAsync<JwtToken>("token");
            // await AuthStateProvider.LoadUserFromStorage();
            
            // var authStateProvider = AuthStateProvider as AuthStateProvider;
            //
            // if (authStateProvider != null)
            // {
            //     await authStateProvider.LoadUserFromStorage();
            // }
            
            StateHasChanged(); // ✅ Forcer un re-render après mise à jour
        }
        // else
        // {
        //     Navigation.NavigateTo("/");
        // }
    }
    
    }
}
